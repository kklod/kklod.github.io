define(["baseView","loading","layoutManager","focusManager","connectionManager","appRouter","appSettings","apphost","globalize","emby-scroller","emby-input","emby-linkbutton","material-icons","emby-button"],function(BaseView,loading,layoutManager,focusManager,connectionManager,appRouter,appSettings,appHost,globalize){"use strict";function stopPolling(instance){instance.currentInterval&&(clearInterval(instance.currentInterval),instance.currentInterval=null)}function showPinErrorMessage(instance,key){var pinMessage=instance.view.querySelector(".pinMessage");pinMessage.classList.remove("hide"),pinMessage.innerHTML=globalize.translate(""+key)}function pollPinStatus(){var instance=this;instance.currentPinInfo&&connectionManager.getPinStatus(instance.currentPinInfo).then(function(pinStatus){pinStatus.IsConfirmed?(stopPolling(instance),function(instance){loading.show(),appSettings.enableAutoLogin(!0),connectionManager.exchangePin(instance.currentPinInfo).then(function(){connectionManager.connect().then(function(result){loading.hide(),"ConnectSignIn"===result.State?appRouter.showItem({Type:"AddServer"}):appRouter.handleConnectionResult(result)})})}(instance)):pinStatus.IsExpired&&(stopPolling(instance),showPinErrorMessage(instance,"PinExpiredMessage"))})}function createPin(instance){instance.currentPinInfo=null,loading.show();var view=instance.view;view.querySelector(".pinMessage").classList.add("hide"),view.querySelector(".pinCodeValue").innerHTML="&nbsp;",stopPolling(instance),connectionManager.createPin(instance).then(function(result){instance.currentPinInfo=result,view.querySelector(".pinCodeValue").innerHTML=result.Pin,function(instance){instance.currentInterval=setInterval(pollPinStatus.bind(instance),3e3)}(instance),loading.hide()},function(){instance.currentPinInfo=null,loading.hide(),showPinErrorMessage(instance,"CreatePinErrorMessage")})}function ConnectLoginView(view,params){BaseView.apply(this,arguments);var self=this;this.enablePinLogin=layoutManager.tv&&(appHost.supports("externallinks")||appHost.supports("externallinkdisplay")),view.querySelector(".btnSkipConnect").addEventListener("click",function(e){loading.show(),connectionManager.connect({enableAutoLogin:appSettings.enableAutoLogin()}).then(function(result){loading.hide(),"ConnectSignIn"===result.State?appRouter.showItem({Type:"AddServer"}):appRouter.handleConnectionResult(result)})}),view.querySelector(".btnSignup").addEventListener("click",function(e){appHost.supports("connectsignup")&&(appRouter.show("/startup/connectsignup.html"),e.preventDefault(),e.stopPropagation())}),view.querySelector(".btnNewPin").addEventListener("click",function(){createPin(self)}),view.querySelector(".manualLoginForm").addEventListener("submit",function(e){return loading.show(),connectionManager.loginToConnect(view.querySelector(".txtUser").value,view.querySelector(".txtPassword").value).then(function(){loading.hide(),appRouter.showSelectServer()},function(){loading.hide(),require(["alert"],function(alert){alert({text:globalize.translate("MessageInvalidUser"),title:globalize.translate("HeaderSignInError")})}),view.querySelector(".txtUser").value=""}),e.preventDefault(),e.stopPropagation(),!1}),function(instance,view){appHost.supports("externallinks")?(view.querySelector(".terms").innerHTML=globalize.translate("EmbyLoginTerms",'<a is="emby-linkbutton" class="lnkTerms button-link" href="https://emby.media/terms" target="_blank">',"</a>"),view.querySelector(".pinCodeHeader").innerHTML=globalize.translate("ConnectPinCodeHeader",'<a is="emby-linkbutton" class="lnkPinSignIn button-link" href="https://emby.media/pin" target="_blank">https://emby.media/pin</a>')):appHost.supports("externallinkdisplay")?(view.querySelector(".terms").innerHTML=globalize.translate("EmbyLoginTerms","",""),view.querySelector(".pinCodeHeader").innerHTML=globalize.translate("ConnectPinCodeHeader","https://emby.media/pin")):(view.querySelector(".terms").innerHTML=globalize.translate("EmbyLoginTerms","",""),view.querySelector(".pinCodeHeader").innerHTML=globalize.translate("ConnectPinCodeHeader","")),instance.enablePinLogin?(view.querySelector(".pinLogin").classList.remove("hide"),view.querySelector(".newUsers").classList.add("hide"),view.querySelector(".manualLoginForm").classList.add("hide"),createPin(instance)):(view.querySelector(".pinLogin").classList.add("hide"),view.querySelector(".newUsers").classList.remove("hide"),view.querySelector(".manualLoginForm").classList.remove("hide"))}(this,this.view)}return Object.assign(ConnectLoginView.prototype,BaseView.prototype),ConnectLoginView.prototype.onPause=function(){BaseView.prototype.onPause.apply(this,arguments),stopPolling(this)},ConnectLoginView.prototype.onResume=function(options){var view;BaseView.prototype.onResume.apply(this,arguments),options.refresh&&(view=this.view,this.enablePinLogin?focusManager.focus(view.querySelector(".btnNewPin")):focusManager.autoFocus(view))},ConnectLoginView.prototype.destroy=function(){BaseView.prototype.destroy.apply(this,arguments),stopPolling(this),this.currentPinInfo=null},ConnectLoginView});